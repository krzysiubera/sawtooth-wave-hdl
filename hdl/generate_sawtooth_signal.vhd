-- File: generate_sawtooth_signal.vhd
-- Generated by MyHDL 0.11
-- Date: Sat Dec  4 14:50:57 2021


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_011.all;

entity generate_sawtooth_signal is
    port (
        output: out unsigned(15 downto 0);
        clk: in std_logic;
        reset: in std_logic
    );
end entity generate_sawtooth_signal;
-- Architecture of block generating sawtooth signal
-- Args:
--     output: (Signal) - output signal with sawtooth wave generated
--     clk: (Signal) - system clock signal
--     reset: (Signal) - reset signal
--     bit_width: (int) - parameter from SystemSettings class - maximum bit width of the signal
--     phase_limit: (int) - parameter from SystemSettings class needed to determine behaviour of the block
-- 
-- Yields:
--     logic: describing behaviour of the block

architecture MyHDL of generate_sawtooth_signal is



signal phase_counter: unsigned(15 downto 0) := 16X"0000";

begin




GENERATE_SAWTOOTH_SIGNAL_LOGIC: process (clk) is
begin
    if rising_edge(clk) then
        if (reset = '1') then
            phase_counter <= to_unsigned(0, 16);
        else
            if (reset = '1') then
                phase_counter <= to_unsigned(0, 16);
            else
                if (signed(resize(phase_counter, 17)) = (175 - 1)) then
                    phase_counter <= to_unsigned(0, 16);
                else
                    phase_counter <= (phase_counter + 1);
                end if;
            end if;
        end if;
    end if;
end process GENERATE_SAWTOOTH_SIGNAL_LOGIC;


output <= phase_counter;

end architecture MyHDL;
